// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"length","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"},{"name":"n","type":"uint256"}],"name":"setIndex","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"lambda","type":"address"}],"name":"reduce","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getIndex","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"push","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"lambda","type":"address"}],"name":"map","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"mapper","type":"address"},{"name":"reducer","type":"address"}],"name":"mapReduceInMemory","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"createdAddress","type":"address"}],"name":"MapFinished","type":"event"}],
    binary: "606060405260018054600160a060020a031916331790556104e1806100246000396000f3606060405236156100615760e060020a60003504631f7b6d3281146100635780632b16b56a146100795780637cff54eb146100ab5780638e7cb6e114610165578063959ac48414610194578063b721ef6e146101d9578063caf5113e14610309575b005b6000545b60408051918252519081900360200190f35b61006160043560243580600060005083815481101561000257508052506000805160206104c183398151915290910155565b6100676004356000600060006000600050600081548110156100025750505080526000805160206104c18339815191525460015b82548110156103cd5783600160a060020a03166333298e25836000600050848154811015610002579080526000805160206104c1833981519152018650546040518360e060020a02815260040180838152602001828152602001925050506020604051808303816000876161da5a03f115610002575050604051519250506001016100df565b6100676004356000600060005082815481101561000257505080526000805160206104c1833981519152015490565b610061600435600080546001810180835582818380158290116103d4578183600052602060002091820191016103d491905b808211156103ee578481556001016101c6565b6100616004356001547fefc81a8c00000000000000000000000000000000000000000000000000000000606090815260009182918291600160a060020a03169063efc81a8c9060649060209060048187876161da5a03f115610002575050604051519350505b6000548110156103f25783600160a060020a0316632b30d2b86000600050838154811015610002578180526000805160206104c1833981519152019050546040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f11561000257505050604051805190602001509150815082600160a060020a031663959ac484836040518260e060020a028152600401808281526020019150506000604051808303816000876161da5a03f1156100025750505060010161023f565b610067600435602435610ce0604052600060606064815b6000815260200190600190039081610320575082905080805b80548210156104385786600160a060020a0316632b30d2b86000600050848154811015610002579080526000805160206104c1833981519152018350546040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f1156100025750506040515193508390508483606481101561000257602002015260019190910190610339565b5092915050565b505050919090600052602060002090016000508290555050565b5090565b7ffdd50ea4601db02859f5d4e787aa5893544a297b674df094f0cd218e0a1736d6836040518082600160a060020a0316815260200191505060405180910390a150505050565b505081516001905b84548210156104b75785600160a060020a03166333298e25828685606481101561000257909060200201516040518360e060020a02815260040180838152602001828152602001925050506020604051808303816000876161da5a03f1156100025750506040515191505060019190910190610440565b969550505050505056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    unlinked_binary: "606060405260018054600160a060020a031916331790556104e1806100246000396000f3606060405236156100615760e060020a60003504631f7b6d3281146100635780632b16b56a146100795780637cff54eb146100ab5780638e7cb6e114610165578063959ac48414610194578063b721ef6e146101d9578063caf5113e14610309575b005b6000545b60408051918252519081900360200190f35b61006160043560243580600060005083815481101561000257508052506000805160206104c183398151915290910155565b6100676004356000600060006000600050600081548110156100025750505080526000805160206104c18339815191525460015b82548110156103cd5783600160a060020a03166333298e25836000600050848154811015610002579080526000805160206104c1833981519152018650546040518360e060020a02815260040180838152602001828152602001925050506020604051808303816000876161da5a03f115610002575050604051519250506001016100df565b6100676004356000600060005082815481101561000257505080526000805160206104c1833981519152015490565b610061600435600080546001810180835582818380158290116103d4578183600052602060002091820191016103d491905b808211156103ee578481556001016101c6565b6100616004356001547fefc81a8c00000000000000000000000000000000000000000000000000000000606090815260009182918291600160a060020a03169063efc81a8c9060649060209060048187876161da5a03f115610002575050604051519350505b6000548110156103f25783600160a060020a0316632b30d2b86000600050838154811015610002578180526000805160206104c1833981519152019050546040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f11561000257505050604051805190602001509150815082600160a060020a031663959ac484836040518260e060020a028152600401808281526020019150506000604051808303816000876161da5a03f1156100025750505060010161023f565b610067600435602435610ce0604052600060606064815b6000815260200190600190039081610320575082905080805b80548210156104385786600160a060020a0316632b30d2b86000600050848154811015610002579080526000805160206104c1833981519152018350546040518260e060020a028152600401808281526020019150506020604051808303816000876161da5a03f1156100025750506040515193508390508483606481101561000257602002015260019190910190610339565b5092915050565b505050919090600052602060002090016000508290555050565b5090565b7ffdd50ea4601db02859f5d4e787aa5893544a297b674df094f0cd218e0a1736d6836040518082600160a060020a0316815260200191505060405180910390a150505050565b505081516001905b84548210156104b75785600160a060020a03166333298e25828685606481101561000257909060200201516040518360e060020a02815260040180838152602001828152602001925050506020604051808303816000876161da5a03f1156100025750506040515191505060019190910190610440565b969550505050505056290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
    address: "",
    generated_with: "2.0.9",
    contract_name: "List"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("List error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.List = Contract;
  }

})();
